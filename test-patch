#!/usr/bin/env bash

##############################
# @jaimecgomezz
#
# This script helps testing
# the integration of a given
# patch with all the previously
# existing patches, NOT its
# functionality
##############################

FAILED=0
SUCCEEDED=0
SUBJECT="$1"

print_usage() { echo "Usage: test-patch [PATCH]" ; exit 1 ; }
print_invalid() { echo "[!] ( $1 ) could't be applied" ; exit 1 ; }
print_unnecesary_test() { echo "No patches to test with." ; exit 1 ; }
print_stash_warning() { echo "[!] Please commit your changes or stash them before proceeding" ; exit 1 ; }

use_patch() { ./handle patch "$1" > /dev/null 2>&1 ; }
use_depatch() { ./handle depatch "$1" > /dev/null 2>&1 ; }
reset_test() { git stash > /dev/null 2>&1 ; use_patch "$SUBJECT" ; }
reset_origin() { git stash > /dev/null ; cat /dev/null > applied ; }

report_fail() { printf "%-30s %-30s\n" "${1}" "Failed!" ; FAILED=$((FAILED+1)) ; }
report_success() { printf "%-30s %-30s\n" "${1}" "Ok" ; SUCCEEDED=$((SUCCEEDED+1)) ; }
report_results() {
  echo
  printf "%-30s %-30s\n" "Tested:" "$( echo "$patches" | wc -w )"
  printf "%-30s %-30s\n" "Succeeded:" "$SUCCEEDED"
  printf "%-30s %-30s\n" "Failed:" "$FAILED"
}

[ ! -z "$SUBJECT" ] || print_usage
[ -z "$(git diff)" ] || print_stash_warning

use_patch "$SUBJECT" || print_invalid "$SUBJECT"

patches="$(
  ls -l patches/*patch \
    | awk '{print $NF}' \
    | grep -v "${SUBJECT}.patch" \
    | sed -E 's/(patches\/)(.*)(\.patch)/\2/g'
)"

[ ! -z "$patches" ] || print_unnecesary_test

while IFS= read -r patch; do
  use_patch "$patch" || report_fail "$patch"
  use_depatch "$patch" && report_success "$patch" || reset_test
done <<< "$patches"

use_depatch "$SUBJECT" || reset_origin
report_results
